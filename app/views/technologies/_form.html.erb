<div id="form">
  <div class="modal-header" style="padding:5px; padding-left: 15px;">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    <h4 class="modal-title" id="file-modal-label"></h4>
  </div>
  <%= simple_form_for(@technology, html: {class: 'form-horizontal group_form', onkeydown: "if(event.keyCode==13)return false;"}, wrapper: :horizontal_form) do |f| %>
    <div class="modal-body" >
      <%= f.input :no, label: '文件编号' %>
      <%= f.input :name%>
      <div class="form-group row string optional technology_valid_at">
        <label class="col-sm-3 col-form-label string optional" for="technology_valid_at">生效时间</label>
        <div class="col-sm-9">
          <div class="input-group date">
            <div class="input-group-addon">
              <i class="fa fa-calendar"></i>
            </div>
            <input type="text" class="form-control pull-right datepicker readonly" value='<%=simple_time @technology.valid_at %>' id="technology_valid_at" name="technology[valid_at]" readonly>
          </div>
<!--          <input class="form-control string optional" type="text" name="technology[valid_at]" id="technology_valid_at">-->
        </div>
      </div>
      <div class="form-group row string optional train_attachment">
        <label class="col-sm-3 col-form-label string optional" for="file">文件</label>
        <div class="col-sm-9">
          <a class="btn btn-xs bg-blue" id="file" href="#" >
            <i class="fa fa-plus"></i>
            <span>选择文件</span>
          </a>
          <span id="filename">
            <% if @technology.file_path.present? %>
            <a href="javascript:void(0)" onclick="show_file(this)" class="btn show-file" data-url="<%= @technology.preview_url%>" data-file-name="<%= @technology.file_name %>">
                        <i class="fa fa-eye"></i><%= show_file_name '图纸文件',  @technology %>
                      </a>
            <% end %>
          </span>
        </div>
      </div>
      <%= f.input :desc %>
      <%= f.input :instance_ids, collection: Instance.all.collect{|instance| ["#{instance.instance_no}-#{instance.name}", instance.id]}, input_html: { class: 'select2', width: '100%', style: 'width: 100%', multiple: "multiple" }, 'data-placeholder': "多选、 可输入文字检索"%>
    </div>
  <% end %>

  <div class="modal-footer">
    <%= button_tag '保存', class: 'btn btn-primary commit commit', data: { disable_with: '保存中' } %>
    <button type="button" class="btn btn-default" data-dismiss="modal">返回</button>
  </div>
  <script type="text/javascript">
    var file_path = '<%= @technology.file_path %>';
    var file_name = '<%= @technology.file_name %>';
      function set_option(name){
          return {
              runtimes: 'html5,html4',          //上传模式,依次退化
              browse_button: name,       //上传选择的点选按钮，**必需**
              uptoken : '<%= @uptoken %>',
              //若未指定uptoken_url,则必须指定 uptoken ,uptoken由其他程序生成
              unique_names: false,
              // 默认 false，key为文件名。若开启该选项，SDK会为每个文件自动生成key（文件名）
              save_key: false,
              // 默认 false。若在服务端生成uptoken的上传策略中指定了 `sava_key`，则开启，SDK在前端将不对key进行任何处理
              domain: '<%= Rails.application.config.qiniu_domain %>',
              //bucket 域名，下载资源时用到，**必需**
              // container: 'container',           //上传区域DOM ID，默认是browser_button的父元素，
              max_file_size: '150mb',           //最大文件体积限制
              // flash_swf_url: 'js/plupload/Moxie.swf',  //引入flash,相对路径
              max_retries: 3,                   //上传失败最大重试次数
              // dragdrop: true,                   //开启可拖曳上传
              // drop_element: 'container',        //拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传
              chunk_size: '4mb',                //分块上传时，每片的体积
              auto_start: false,                 //选择文件后自动上传，若关闭需要自己绑定事件触发上传
              // filters: [
              //     {title: "files", extensions: "xls,xslx,doc,docx,pdf,png,jpg,jpeg,gif,bmp"}
              // ],
              init: {
                  'FilesAdded': function (up, files) {
                      plupload.each(files, function (file) {
                          // 文件添加进队列后,处理相关的事情
                          $('#filename').text(file.name);
                      });
                  },
                  'BeforeUpload': function (up, file) {
                      showSpinner();
                      // 加载loading
                      // 每个文件上传前,处理相关的事情
                  },
                  'UploadProgress': function (up, file) {
                      // 每个文件上传时,处理相关的事情
                  },
                  'FileUploaded': function (up, file, info) {
                      // 每个文件上传成功后,处理相关的事情
                      // 其中 info 是文件上传成功后，服务端返回的json，形式如
                      // {
                      //    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",
                      //    "key": "gogopher.jpg"
                      //  }
                      // 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html
                      var domain = up.getOption('domain');
                      console.log(info);
                      var res = $.parseJSON(info.response);
                      // var res = parseJSON(info);
                      var sourceLink = domain + res.key; //
                      // 提交到服务器
                      // console.log(info);
                      file_path = res.key;
                      file_name = file.name;
                  },
                  'Error': function (up, err, errTip) {
                      //上传出错时,处理相关的事情
                      console.log(err);
                      alert(err.message);
                  },
                  'UploadComplete': function () {
                      //队列文件处理完毕后,处理相关的事情
                      console.log('complete');
                      if(file_path){
                          $.ajax({
                              type: '<%= @technology.id.present? ? 'PATCH' : 'POST' %>',
                              url: '<%= @technology.id.present? ? technology_path(@technology) : technologies_path  %>',
                              data: $.extend({file_path: file_path, file_name: file_name}, getData()),
                              dataType: 'script',
                              success: function (data) {

                              }
                          })
                      }
                  },
                  'Key': function (up, file) {
                      // 若想在前端对每个文件的key进行个性化处理，可以配置该函数
                      // 该配置必须要在 unique_names: false , save_key: false 时才生效
                      var key = '<%= SecureRandom.uuid %>-' + file.name;
                      // do something with key here
                      return key
                  }
              }
          }
      }

      function getData(){
          var array_data = $('.group_form').serializeArray();
          var data = {}
          for (var i=0;i<array_data.length;i++)
          {
              data[array_data[i].name]= array_data[i].value;
          }
          console.log(data);
          return data;
      }
      $(function(){
          var qiniu = new QiniuJsSDK();
          var option = set_option('file');
          var uploader = qiniu.uploader(option);

          $('.commit').click(function(){
              uploader.start();
          });
          setTimeout(function(){ uploader.refresh(); }, 1000);
          $('.select2').select2();
          $('.datepicker').datepicker({
              autoclose: true,
              language: 'zh-cn'
          });
      });
  </script>
</div>



